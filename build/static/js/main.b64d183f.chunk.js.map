{"version":3,"sources":["components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","id","to","href","App","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wVA8BeA,MAzBf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,8BAA8BC,GAAG,QAChD,yBAAKD,UAAU,UACX,yBAAKA,UAAU,gBAAf,mBACA,kBAAC,WAAD,CAAME,GAAG,YACL,yBAAKF,UAAU,UAAUC,GAAG,YAA5B,WAEJ,kBAAC,WAAD,CAAMC,GAAG,cACL,yBAAKF,UAAU,UAAUG,KAAK,WAAWF,GAAG,WAA5C,cAEJ,kBAAC,WAAD,CAAMC,GAAG,YACT,yBAAKF,UAAU,UAAUC,GAAG,cAA5B,gBC+CDG,G,uLAtDX,OACE,yBAAKJ,UAAU,QAOb,yBAAKA,UAAU,UAAUC,GAAG,WAC1B,yBAAKD,UAAU,aAEb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,aAAf,kBAGA,yBAAKA,UAAU,YAAf,gBAGA,yBAAKA,UAAU,aAAf,qDAIF,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,SAASK,IAAI,oBAGhC,yBAAKL,UAAU,gBACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,aAAf,2bASR,yBAAKA,UAAU,mBAAmBC,GAAG,aAEnC,yBAAKD,UAAU,aAAf,sBAIF,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,YAAYC,GAAG,WAA9B,yB,GA/CQK,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAEL,kBAAC,gBAAD,KACI,6BACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWjB,IAC3B,kBAAC,EAAD,QAGNkB,SAASC,eAAe,SDgHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b64d183f.chunk.js","sourcesContent":["import React from \"react\";\n// import { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport { HashLink as Link } from 'react-router-hash-link';\nimport \"./style.css\";\n\nfunction Navbar(props) {\n    return (\n        <div className=\"navTop\">\n            <nav className=\"navbar navbar-dark bg-dark \" id=\"nav1\">\n            <div className=\"navDiv\">\n                <div className=\"navbar-brand\" >React Portfolio</div>\n                <Link to=\"#aboutMe\">\n                    <div className=\"navMenu\" id=\"navAbout\"> About</div>\n                </Link>\n                <Link to=\"#portfolio\">\n                    <div className=\"navMenu\" href=\"#portSec\" id=\"navPort\">Portfolio</div>\n                </Link>\n                <Link to=\"#contact\">\n                <div className=\"navMenu\" id=\"navContact\">Contact</div>\n                </Link>\n                \n            </div>\n        </nav>\n        </div>\n\n\n        \n    );\n}\n\nexport default Navbar;\n","\n\nimport { HashLink as Link } from 'react-router-hash-link';\n// import { NavHashLink as NavLink } from 'react-router-hash-link';\n// import { BrowserRouter, Router, Link } from \"react-router-dom\";\nimport React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main\">\n        \n\n\n        {/* <Link smooth to=\"#aboutMe2\">Link to Hash Fragment (#portSec)</Link> */}\n\n\n        <div className=\"aboutMe\" id=\"aboutMe\">\n          <div className=\"container\">\n\n            <div className=\"row\">\n              <div className=\"col-md-8\">\n                <div className=\"introText\">\n                  Hi! My name is\n            </div>\n                <div className=\"nameText\">\n                  Saron Nhong.\n              </div>\n                <div className=\"quoteText\">\n                  \"Aspire To Inspire Before You Expire.\" - unknown\n            </div>\n              </div>\n              <div className=\"col-md-4 circular\">\n                <img className=\"circle\" src=\"img/crabs.jpg\"></img>\n              </div>\n            </div>\n            <div className=\"row emptyRow\">\n              <div className=\"col-md-9\">\n                <div className=\"introText\">\n                  I am Web Developer with strong skills in HTML, CSS, and Javascript. I have a strong desire to continue to learn new things and find great satisfaction in solving complicated problems. My previous career as a Software Test Engineer allowed me to understand the hard work it takes to put out quality software. Excited to have software testing skills alongside development skills to have a deeper involvement in building out applications.\n              </div>\n              </div>\n            </div>\n          </div>\n\n\n        </div>\n        <div className=\"portfolioSection\" id=\"portfolio\">\n\n          <div className=\"container\">\n            Portfolio Section\n        </div>\n        </div>\n        <div className=\"contactSection\">\n          <div className=\"container\" id=\"contact\">\n            Contact Section\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Navbar from './components/Navbar';\n\nReactDOM.render(\n    // <App />\n    <Router>\n        <div>\n            <Route path=\"/\" component={Navbar} />\n            <App />\n        </div>\n    </Router>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}